../
|-- docs         <-- Documentation
|-- examples     <-- Exemple d'un compiler simple (Calculatrice)
|-- planning     <-- Planning du projet
|-- pom.xml      <-- Fichier de configuration
|-- README.md    <-- README
|-- src
|   |-- main
|   |   |-- antlr4
|   |   |   `-- fr
|   |   |       `-- ensimag
|   |   |           `-- deca
|   |   |               `-- syntax           <-- Fichiers ANTLR pour analyseur Lexical/Syntaxique
|   |   |-- assembly
|   |   |-- bin
|   |   |   `-- decac
|   |   |-- config
|   |   |-- java
|   |   |   `-- fr
|   |   |       `-- ensimag
|   |   |           |-- deca
|   |   |           |   |-- CLIException.java
|   |   |           |   |-- codegen                             <-- Fichiers nécessaires pour la génération du code assembleur (gestion de la pile, des registres)
|   |   |           |   |-- CompilerOptions.java                <-- Options de compilation de la commande decac
|   |   |           |   |-- context                             <-- Fichiers nécessaires pour la vérification contextuelle
|   |   |           |   |-- DecacCompiler.java                  <-- Instance du compiler
|   |   |           |   |-- DecacFatalError.java
|   |   |           |   |-- DecacMain.java
|   |   |           |   |-- syntax                              <-- Gestion des erreurs et superclasses des fichiers ANTLR qui fournissent des fonctions utiles pour l'analyse
|   |   |           |   |-- tools                               <-- Classes utilitaires
|   |   |           |   `-- tree                                <-- Fichiers des noeuds de l'arbre généré par l'analyse syntaxique
|   |   |           `-- ima                                     <-- Gestion de l'assembleur
|   |   |               `-- pseudocode                          <-- Classes intermédiaires nécessaires pour la génération du code assembleur
|   |   |                   |-- instructions                    <-- Instructions assembleur disponibles
|   |   `-- resources                                      <-- Fonctions fournies pour l'extension TRIGO
|   `-- test
|       |-- deca      <-- Tests du compiler deca
|       |   |-- codegen          <-- Tests pour la génération du code assembleur
|       |   |   `-- valid         <-- Tests qui génèrent du code valide
|       |   |       |-- created               <-- Tests crée nous-même 
|       |   |       |-- provided              <-- Tests fournis
|       |   |-- context          <-- Tests sur l'analyse contextuel
|       |   |   |-- invalid       <-- Tests qui génèrent un contexte invalide
|       |   |   |   |-- created
|       |   |   |   `-- provided
|       |   |   `-- valid          <-- Tests qui génèrent un contexte valide
|       |   |       |-- created
|       |   |       `-- provided
|       |   |-- lex           <-- Tests du grammaire
|       |   |   |-- invalid
|       |   |   |   |-- alexpected       <-- Sorties attendues par les tests unitaires de l'analyseur lexical
|       |   |   |   |-- created
|       |   |   |   `-- provided
|       |   |   `-- valid
|       |   |       |-- alexpected
|       |   |       |-- created
|       |   |       `-- provided
|       |   `-- syntax               <-- Tests sur l'analyse syntaxique
|       |       |-- invalid
|       |       |   |-- alexpected
|       |       |   |-- created
|       |       |   `-- provided
|       |       `-- valid
|       |           |-- alexpected
|       |           |-- created
|       |           `-- provided
|       |-- java         <-- Tests unitaires des fonctionnalités du compiler
|       |   `-- fr
|       |       `-- ensimag
|       |           `-- deca
|       |               |-- context       <-- Tests sur l'analyse contextuel
|       |               |-- syntax           <-- Tests sur l'analyse syntaxique
|       |               |   `-- Tests_oracle        <-- Oracle de test qui va comparer la sortie du compiler avec une sortie attendue correcte
|       |               |       |-- expected         <-- Sortie attendue correcte
|       |               |       |-- obtained         <-- Sortie obtenue
|       |               |-- tools         <-- Test des symboles d'un programme
|       |               `-- tree             <-- Test de l'arbre d'un programme
|       `-- script                  <-- Scripts bash qui lancent les tests par catégorie (synt, lex, context, etc)
|           |-- launchers             <-- Commandes CLI
|           |   |-- '
|           |   |-- chain_test_context
|           |   |-- cutting-files.py
|           |   |-- decac_commands
|           |   |-- gen_expected_synt
|           |   |-- invalidor_lex
|           |   |-- invalidor_synt
|           |   |-- show_c
|           |   |-- test_context
|           |   |-- test_de_test.sh~
|           |   |-- test_lex
|           |   |-- test_synt
|           |   |-- validor_cod
|           |   |-- validor_lex
|           |   |-- validor_synt
|           |   `-- validor_synt_objet
`-- target         <-- fichiers générés

126 directories, 1119 files
|   |   |           |   |   |-- package-info.java
