; Test pour savoir si la pile est pleine
	TSTO #6
	BOV pile_pleine
	ADDSP #4
; start main program
; Class Declaration
; Code de la table des méthodes de Object
	LOAD #null, R0
	STORE R0, 21(GB)
	LOAD code.Object.equals, R0
	STORE R0, 22(GB)
; Main Function
; Declaration des variables
	LOAD #0, R2
	STORE R2, 23(GB)
; Beginning of main instructions:
Begin_While_1:
; <
	LOAD 23(GB), R2
	PUSH R2
	LOAD #5, R2
	CMP R2, R2
	BGE End_While_1
	POP R2
; +
	LOAD 23(GB), R2
	PUSH R2
	LOAD #1, R2
	ADD R2, R2
	BOV debordement
	POP R2
	STORE R2, 23(GB)
	LOAD 23(GB), R1
	WINT
	WNL
	BRA Begin_While_1
End_While_1:
Begin_While_2:
; !=
	LOAD 23(GB), R2
	PUSH R2
	LOAD #10, R2
	CMP R2, R2
	BEQ End_While_2
	POP R2
; +
	LOAD 23(GB), R2
	PUSH R2
	LOAD #1, R2
	ADD R2, R2
	BOV debordement
	POP R2
	STORE R2, 23(GB)
	LOAD 23(GB), R1
	WINT
	WNL
	BRA Begin_While_2
End_While_2:
Begin_While_3:
; ==
	LOAD 23(GB), R2
	PUSH R2
	LOAD #10, R2
	CMP R2, R2
	BNE End_While_3
	POP R2
; +
	LOAD 23(GB), R2
	PUSH R2
	LOAD #1, R2
	ADD R2, R2
	BOV debordement
	POP R2
	STORE R2, 23(GB)
	LOAD 23(GB), R1
	WINT
	WNL
	BRA Begin_While_3
End_While_3:
Begin_While_4:
; >
	LOAD 23(GB), R2
	PUSH R2
	LOAD #50, R2
	CMP R2, R2
	BLE End_While_4
	POP R2
; +
	LOAD 23(GB), R2
	PUSH R2
	LOAD #1, R2
	ADD R2, R2
	BOV debordement
	POP R2
	STORE R2, 23(GB)
	LOAD 23(GB), R1
	WINT
	WNL
	BRA Begin_While_4
End_While_4:
	HALT
<<<<<<< HEAD
=======
code.Object.equals:
>>>>>>> c423b6d2167ba364dc50207abb16cf5dd4ebba6e
pile_pleine:
	WSTR "Erreur : Pile pleine."
	WNL
	ERROR
dereferencement_null:
	WSTR "Erreur : dereferencement null."
	WNL
	ERROR
tas_plein:
	WSTR "Erreur : Tas plein."
	WNL
	ERROR
debordement:
	WSTR "Erreur : debordement durant une operation arithmétique"
	WNL
	ERROR
io_error:
	WSTR "Erreur : input ou output"
	WNL
	ERROR
; end main program
